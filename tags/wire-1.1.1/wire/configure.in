# Process this file with autoconf to produce a configure script
AC_INIT([wire], [1.1.1], [axel@zankasoftware.com])
AC_PREREQ([2.57])
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADER([config.h])

# Get host
AC_CANONICAL_HOST

# These are used in the source code
AC_DEFINE([WR_VERSION], ["AC_PACKAGE_VERSION"], [Application version])
AC_DEFINE([WR_PROTOCOL_VERSION], ["1.1"], [Protocol version])
AC_DEFINE([WR_BUGREPORT], ["AC_PACKAGE_BUGREPORT"], [Maintainer's email address])

# These are used in the Makefile
AC_SUBST([WR_VERSION], [AC_PACKAGE_VERSION])

# These are used in configure.in
AC_DEFUN([WR_MSG_LIB_ERROR], [
	AC_MSG_ERROR([could not locate $1

If you installed $1 into a non-standard directory, please run:

    CPPFLAGS="-I/path/to/include" LDFLAGS="-L/path/to/lib" ./configure])
])

AC_DEFUN([WR_MSG_LIBWIRED_ERROR], [
    AC_MSG_ERROR([could not locate libwired

You need to download a version of libwired and place it in the same directory as this configure script])
])


#######################################################################
# Checks for compilers

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET


#######################################################################
# Checks for flags

# Check for warnings
AC_MSG_CHECKING([for warning flags])
AC_ARG_ENABLE([warnings], AC_HELP_STRING([--enable-warnings], [enable warnings]))

AC_DEFUN([WR_WARNING_TRY], [
	OLD_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $1"

	AC_COMPILE_IFELSE([
		int main(void) {
			return 0;
		}
	], [
		WARNFLAGS="$WARNFLAGS $1"
	], [
		CFLAGS="$OLD_CFLAGS"
	])
])

if test -n "$enable_warnings"; then
	WR_WARNING_TRY([-W])
	WR_WARNING_TRY([-Wall])
	WR_WARNING_TRY([-Wno-unknown-pragmas])
	WR_WARNING_TRY([-Wno-unused-parameter])
	WR_WARNING_TRY([-Wsign-compare])
	WR_WARNING_TRY([-Wstrict-prototypes])
	WR_WARNING_TRY([-Wmissing-prototypes])
	WR_WARNING_TRY([-Wmissing-declarations])
	WR_WARNING_TRY([-Wredundant-decls])

	AC_MSG_RESULT([$WARNFLAGS])
else
	AC_MSG_RESULT([none])
fi


# Check for object directory name
AC_ARG_WITH([objdir])

if test -n "$with_objdir"; then
	AC_SUBST([objdir], ["$with_objdir"])
	wr_libwired_objdir="$with_objdir"
else
	AC_SUBST([objdir], ["obj"])
	wr_libwired_objdir="$(pwd)/obj"
fi


# Check for run directory name
AC_ARG_WITH([rundir])

if test -n "$with_rundir"; then
	AC_SUBST([rundir], ["$with_rundir"])
	wr_libwired_rundir="$with_rundir/libwired"
else
	AC_SUBST([rundir], ["run"])
	wr_libwired_rundir="$(pwd)/run/libwired"
fi


# Check for maintainer mode
AC_ARG_ENABLE([maintainer_mode])

if test -n "$enable_maintainer_mode"; then
	AC_SUBST([WR_MAINTAINER], [1])
else
	AC_SUBST([WR_MAINTAINER], [0])
fi


#######################################################################
# Checks for additional paths

# Check if we need /usr/local/{include,lib}/
if test -d /usr/local/include; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/include"
fi

if test -d /usr/local/lib; then
	LDFLAGS="$LDFLAGS -L/usr/local/lib"
fi


# Check if we need /usr/local/ssl/{include,lib}/
if test -d /usr/local/ssl/include; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/ssl/include"
fi

if test -d /usr/local/ssl/lib; then
	LDFLAGS="$LDFLAGS -L/usr/local/ssl/lib"
fi


# Check if we need /usr/kerberos/include
if test -d /usr/kerberos/include; then
	CPPFLAGS="$CPPFLAGS -I/usr/kerberos/include"
fi


#######################################################################
# Checks for libraries

# Check that we have a libwired in this directory
if ! test -f libwired/configure; then
	WR_MSG_LIBWIRED_ERROR
fi


# Check if we need the math library
AC_CHECK_FUNC([pow], [], [
	AC_CHECK_LIB([m], [sqrt], [
		LIBS="$LIBS -lm"
	])
])


# Check if we need the socket library
AC_CHECK_FUNC(setsockopt, [], [
	AC_CHECK_LIB([socket], [setsockopt], [
		LIBS="$LIBS -lsocket"
	])
])


# Check if we need the network services library
AC_CHECK_FUNC([gethostent], [], [
	AC_CHECK_LIB([nsl], [gethostent], [
		LIBS="$LIBS -lnsl"
	])
])


# Check if we need the resolve services library
AC_CHECK_FUNC([inet_aton], [], [
	AC_CHECK_LIB([resolv], [inet_aton], [
		LIBS="$LIBS -lresolv"
	])
])


# Check for the OpenSSL crypto library
AC_CHECK_HEADERS([openssl/sha.h], [
	AC_CHECK_LIB([crypto], [MD5_Init], [
		LIBS="$LIBS -lcrypto"
	], [
		WR_MSG_LIB_ERROR([OpenSSL])
	])
], [
	WR_MSG_LIB_ERROR([OpenSSL])
])


# Check for the OpenSSL ssl library
AC_CHECK_HEADERS([openssl/ssl.h], [
	AC_CHECK_LIB([ssl], [SSL_library_init], [
		LIBS="$LIBS -lssl"
	], [
		WR_MSG_LIB_ERROR([OpenSSL])
	])
], [
	WR_MSG_LIB_ERROR([OpenSSL])
])


# Check for the iconv library
AC_CHECK_HEADERS([iconv.h], [
	AC_CHECK_LIB([iconv], [iconv], [
		LIBS="$LIBS -liconv"
	], [
		AC_CHECK_LIB([iconv], [libiconv], [
			LIBS="$LIBS -liconv"
		], [
			AC_CHECK_FUNC([iconv], [], [
				WR_MSG_LIB_ERROR([iconv])
			])
		])
	])
], [
	WR_MSG_LIB_ERROR([iconv])
])

AC_MSG_CHECKING([if iconv understands Unicode])
AC_RUN_IFELSE([
	#include <iconv.h>
	int main(void) {
		iconv_t conv = iconv_open("UTF-8", "UTF-16");
		if(conv == (iconv_t) -1)
			return 1;
		return 0;
	}
], [
	AC_MSG_RESULT([yes])
], [
	AC_MSG_ERROR([no])
])


# Check for the termcap library
AC_CHECK_HEADERS([term.h], [
	AC_CHECK_FUNC([tgoto], [], [
		AC_CHECK_LIB([termcap], [tgoto], [
			LIBS="$LIBS -ltermcap"
		], [
			AC_CHECK_LIB([ncurses], [tgoto], [
				LIBS="$LIBS -lncurses"
			], [
				AC_CHECK_LIB([curses], [tgoto], [
					LIBS="$LIBS -lcurses"
				])
			])
		])
	])
])


# Check for the readline library
AC_CHECK_HEADERS([readline/readline.h], [
	AC_CHECK_LIB([readline], [rl_initialize], [
		LIBS="$LIBS -lreadline"

		AC_MSG_CHECKING([for rl_completion_matches])
		AC_RUN_IFELSE([
			#include <stdio.h>
			#include <readline/readline.h>
			char * generator(const char *, int);
			char * generator(const char *text, int state) {
				return NULL;
			}
			int main(void) {
				(void) rl_completion_matches("", generator);

				return 0;
			}
		], [
			AC_DEFINE([HAVE_RL_COMPLETION_MATCHES], [1], [Define to 1 if you have the `rl_completion_matches' function, and to 0 otherwise.])
			AC_MSG_RESULT([yes])

		], [
			AC_MSG_RESULT([no])
		])

		AC_CHECK_DECLS([rl_completion_display_matches_hook], [], [], [
			#include <stdio.h>
			#include <readline/readline.h>
		])
	], [
		WR_MSG_LIB_ERROR([readline])
	])
], [
	WR_MSG_LIB_ERROR([readline])
])


# Check for CoreServices (Mac OS X)
AC_CHECK_HEADERS([CoreServices/CoreServices.h], [
	LIBS="$LIBS -framework CoreServices -framework Carbon"
])


#######################################################################
# Checks for typedefs, structures, and compiler characteristics

AC_SYS_LARGEFILE


#######################################################################
# Output

AC_CONFIG_FILES([Makefile])

# Configure libwired
AC_ARG_WITH([libwired], , [
	if test "$with_libwired" = "yes"; then
		wr_libwired=1
	fi
], [
	wr_libwired=1
])

if test "$wr_libwired"; then
	ac_configure_args="$ac_configure_args --enable-ssl --enable-termcap --enable-iconv --with-rundir=$wr_libwired_rundir --with-objdir=$wr_libwired_objdir"
	AC_CONFIG_SUBDIRS([libwired])
fi

AC_OUTPUT


#######################################################################
# Print summary

A=$(eval echo ${bindir});	A=$(eval echo ${A})
B=$(eval echo ${mandir});	B=$(eval echo ${B})

echo ""
echo "wire has been configured with the following options:"

echo ""
echo "              Binary: ${A}/wire"
echo "         Manual page: ${B}/man1/wire.1"

echo ""
echo "                Host: ${host}"
echo "            Compiler: ${CC}"
echo "      Compiler flags: ${CFLAGS}"
echo "  Preprocessor flags: ${CPPFLAGS}"
echo "        Linker flags: ${LDFLAGS}"
echo "           Libraries: ${LIBS}"

echo ""
