# Process this file with autoconf to produce a configure script
AC_INIT([wired], [1.2.4], [axel@zankasoftware.com])
AC_PREREQ([2.57])
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADER([config.h])

# Get host
AC_CANONICAL_HOST

# These are used in the source code
AC_DEFINE([WD_PACKAGE_VERSION], ["AC_PACKAGE_VERSION"], [Application version])
AC_DEFINE([WD_PROTOCOL_VERSION], ["1.1"], [Protocol version])
AC_DEFINE([WD_BUGREPORT], ["AC_PACKAGE_BUGREPORT"], [Maintainer's email address])
AC_DEFINE_UNQUOTED([WD_CPU], ["$host_cpu"], [Host CPU])

# These are used in the Makefile
AC_SUBST([WD_PACKAGE_VERSION], ["AC_PACKAGE_VERSION"])

# These are used in configure.in
AC_DEFUN([WD_MSG_LIB_ERROR], [
	AC_MSG_ERROR([could not locate $1
	
If you installed $1 into a non-standard directory, please run:

    env CPPFLAGS="-I/path/to/include" LDFLAGS="-L/path/to/lib" ./configure])
])


#######################################################################
# Checks for compilers

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET


#######################################################################
# Checks for flags

# Check for some other user to use than "wired"
AC_MSG_CHECKING([for user])
AC_ARG_WITH([user],
	[  --with-user=USER        use a user other than "wired"]
)

if test -z "$with_user"; then
	with_user="wired"
fi

AC_MSG_RESULT([$with_user])
AC_TRY_RUN([
	#include <sys/types.h>
	#include <pwd.h>
	int main(void) {
		struct passwd *pwd = getpwnam("$with_user");
		if(!pwd)
			return 1;
		return 0;
	}
], [], [
	AC_MSG_ERROR([no such user "$with_user", please set another --with-user])
])

AC_DEFINE_UNQUOTED([WD_USER], ["$with_user"], [User name])
AC_SUBST([WD_USER], ["$with_user"])


# Check for some other group to use than "daemon"
AC_MSG_CHECKING([for group])
AC_ARG_WITH([group],
	[  --with-group=GROUP      use a group other than "daemon"]
)

if test -z "$with_group"; then
	with_group="daemon"
fi

AC_MSG_RESULT([$with_group])
AC_TRY_RUN([
	#include <sys/types.h>
	#include <grp.h>
	int main(void) {
		struct group *grp = getgrnam("$with_group");
		if(!grp)
			return 1;
		return 0;
	}
], [], [
	AC_MSG_ERROR([no such group "$with_group", please set another --with-group])
])

AC_DEFINE_UNQUOTED([WD_GROUP], ["$with_group"], [Group name])
AC_SUBST([WD_GROUP], ["$with_group"])


# Check for warnings
AC_MSG_CHECKING([whether to enable warnings])
AC_ARG_ENABLE([warnings],
	[  --enable-warnings       enable warnings]
)

if test -n "$enable_warnings"; then
	AC_MSG_RESULT([yes])
	CFLAGS="$CFLAGS -Wall"
else
	AC_MSG_RESULT([no])
fi


#######################################################################
# Checks for programs

AC_CHECK_PROG([MV], [mv], [mv])
AC_CHECK_PROG([CP], [cp], [cp])
AC_CHECK_PROG([RM], [rm], [rm])
AC_CHECK_PROG([MKDIR], [mkdir], [mkdir])
AC_CHECK_PROG([CHMOD], [chmod], [chmod])
AC_CHECK_PROG([TAR], [tar], [tar])
AC_CHECK_PROG([SED], [sed], [sed])
AC_CHECK_PROG([CUT], [cut], [cut])
AC_CHECK_PROG([FIND], [find], [find])
AC_CHECK_PROG([XARGS], [xargs], [xargs])
AC_CHECK_PROG([OPENSSL], [openssl], [openssl])


#######################################################################
# Checks for libraries

# Check if we need /usr/local/{include,lib}/
if test -d /usr/local/include; then
	CFLAGS="$CFLAGS -I/usr/local/include"
fi

if test -d /usr/local/lib; then
	LDFLAGS="$LDFLAGS -L/usr/local/lib"
fi


# Check if we need the math library
AC_CHECK_FUNC([pow], [], [
	AC_CHECK_LIB([m], [main], [
		LIBS="$LIBS -lm"
	])
])


# Check if we need the socket library
AC_CHECK_FUNC(setsockopt, [], [
	AC_CHECK_LIB([socket], [setsockopt], [
		LIBS="$LIBS -lsocket"
	])
])


# Check if we need the network services library
AC_CHECK_FUNC([gethostent], [], [
	AC_CHECK_LIB([nsl], [gethostent], [
		LIBS="$LIBS -lnsl"
	])
])


# Check if we need the resolve services library
AC_CHECK_FUNC([inet_aton], [], [
    AC_CHECK_LIB([resolv], [inet_aton], [
		LIBS="$LIBS -lresolv"
	])
])


# Check for the OpenSSL crypto library
AC_CHECK_HEADERS([openssl/sha.h], [
	AC_CHECK_LIB([crypto], [main], [
		LIBS="$LIBS -lcrypto"
	], [
		WD_MSG_LIB_ERROR([OpenSSL])
	])
], [
	WD_MSG_LIB_ERROR([OpenSSL])
])


# Check for the OpenSSL ssl library
AC_CHECK_HEADERS([openssl/ssl.h], [
	AC_CHECK_LIB([ssl], [main], [
		LIBS="$LIBS -lssl"
	], [
		WD_MSG_LIB_ERROR([OpenSSL])
	])
], [
	WD_MSG_LIB_ERROR([OpenSSL])
])


# Check for CoreServices (Mac OS X)
AC_CHECK_HEADERS([CoreServices/CoreServices.h], [
	LIBS="$LIBS -framework CoreServices"
])


# Check for Carbon (Mac OS X)
AC_CHECK_HEADERS([Carbon/Carbon.h], [
	LIBS="$LIBS -framework Carbon"
])


#######################################################################
# Checks for pthreads

# pthreads test includes
AC_DEFUN([WD_PTHREAD_TEST_INCLUDES], [ 
	#include <pthread.h>
	#include <errno.h>

	void * thread(void *arg) {
		return NULL;
	}
])


# pthreads test function
AC_DEFUN([WD_PTHREAD_TEST_FUNCTION], [ 
	pthread_t tid;

	if(pthread_create(&tid, 0, thread, NULL) < 0)
		return errno;

	return 0;
])


# pthreads test program
AC_DEFUN([WD_PTHREAD_TEST_PROGRAM], [ 
	WD_PTHREAD_TEST_INCLUDES

	int main(void) {
		WD_PTHREAD_TEST_FUNCTION
	}
])


# Try to compile the pthreads program
AC_DEFUN([WD_PTHREAD_TRY], [
	if test "$wd_pthreads_found" != yes ; then
		# save libs
		old_LIBS="$LIBS"
		LIBS="$1 $LIBS"
	
		# try to run it
		AC_TRY_RUN(WD_PTHREAD_TEST_PROGRAM, [
			wd_pthreads_test=yes
		], [
			wd_pthreads_test=no
		], [
			AC_TRY_LINK(WD_PTHREAD_TEST_INCLUDES, WD_PTHREAD_TEST_FUNCTION, [
				wd_pthreads_test=yes
			], [
				wd_pthreads_test=no
			])
		])
	
		# restore libs
		LIBS="$old_LIBS"
		
		# did we find something?
		if test $wd_pthreads_test = yes ; then
			wd_pthreads_found=yes
			wd_pthreads_libs="$1"
		fi
	fi
])


# Check for pthreads
AC_CHECK_HEADERS([pthread.h], [
	AC_MSG_CHECKING([for pthreads])

	# try to compile with the following libraries linked
	WD_PTHREAD_TRY([])
	WD_PTHREAD_TRY([-pthread])
	WD_PTHREAD_TRY([-lpthread])
	
	# did we find something?
	if test "$wd_pthreads_found" = yes ; then
		AC_MSG_RESULT([yes])
		LIBS="$wd_pthreads_libs $LIBS"
	else
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([could not locate pthreads])
	fi
], [
	AC_MSG_ERROR([could not locate pthreads])
])


#######################################################################
# Checks for header files

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_HEADER_STDBOOL
AC_CHECK_HEADERS([ \
	arpa/inet.h \
	errno.h \
	fcntl.h \
	limits.h \
	netdb.h \
	netinet/in.h \
	stdlib.h \
	string.h \
	sys/ioctl.h \
	sys/mount.h \
	sys/param.h \
	sys/socket.h \
	sys/time.h \
	sys/vfs.h \
	syslog.h \
	unistd.h \
])


#######################################################################
# Checks for typedefs, structures, and compiler characteristics

AC_C_CONST
AC_C_VOLATILE
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_STRUCT_TM


#######################################################################
# Checks for library functions

AC_FUNC_CHOWN
AC_FUNC_FSEEKO
AC_FUNC_MALLOC
AC_FUNC_LSTAT
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([ \
	gethostbyaddr \
	gethostbyname \
	gethostname \
	gettimeofday \
	inet_ntoa \
	localtime_r \
	memset \
	mkdir \
	pow \
	realpath \
	regcomp \
	rmdir \
	select \
	setproctitle \
	socket \
	strcasecmp \
	strncasecmp \
	strcasestr \
	strchr \
	strdup \
	strerror \
	strlcat \
	strlcpy \
	strpbrk \
	strrchr \
	strsep \
	strstr \
	strtol \
	strtoul \
	strtoull \
	tzset \
	uname \
	vasprintf \
])


#######################################################################
# Output

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([hl2wired/Makefile])
AC_CONFIG_FILES([wired/Makefile])

AC_OUTPUT
