# Process this file with autoconf to produce a configure script
AC_INIT([libwired], [1.0], [axel@zankasoftware.com])
AC_PREREQ([2.57])
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADER([config.h])

# Get host
AC_CANONICAL_HOST

# These are used in the source code
AC_DEFINE([WI_VERSION], ["AC_PACKAGE_VERSION"], [Application version])
AC_DEFINE_UNQUOTED([WI_CPU], ["$host_cpu"], [Host CPU])

# These are used in the Makefile
AC_SUBST([WI_VERSION], ["AC_PACKAGE_VERSION"])

# These are used in configure.in
AC_DEFUN([WI_MSG_LIB_ERROR], [
	AC_MSG_ERROR([could not locate $1

If you installed $1 into a non-standard directory, please run:

    CPPFLAGS="-I/path/to/include" LDFLAGS="-L/path/to/lib" ./configure])
])


#######################################################################
# Checks for compilers

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET


#######################################################################
# Checks for flags

# Check for warnings
AC_MSG_CHECKING([for warning flags])
AC_ARG_ENABLE([warnings], AC_HELP_STRING([--enable-warnings], [enable warnings]))

AC_DEFUN([WI_WARNING_TRY], [
	OLD_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $1"

	AC_COMPILE_IFELSE([
		int main(void) {
			return 0;
		}
	], [
		WARNFLAGS="$WARNFLAGS $1"
	], [
		CFLAGS="$OLD_CFLAGS"
	])
])

if test -n "$enable_warnings"; then
	WI_WARNING_TRY([-W])
	WI_WARNING_TRY([-Wall])
	WI_WARNING_TRY([-Wno-unknown-pragmas])
	WI_WARNING_TRY([-Wno-unused-parameter])
	WI_WARNING_TRY([-Wsign-compare])
	WI_WARNING_TRY([-Wstrict-prototypes])
	WI_WARNING_TRY([-Wmissing-prototypes])
	WI_WARNING_TRY([-Wmissing-declarations])
	WI_WARNING_TRY([-Wredundant-decls])
	WI_WARNING_TRY([-Wno-long-double])

	AC_MSG_RESULT([$WARNFLAGS])
else
	AC_MSG_RESULT([none])
fi


# Check for pthreads support
AC_ARG_ENABLE([pthreads], AC_HELP_STRING([--enable-pthreads], [enable pthreads support]))

if test -n "$enable_pthreads"; then
	CFLAGS="$CFLAGS -DWI_PTHREADS"
fi


# Check for termcap support
AC_ARG_ENABLE([termcap], AC_HELP_STRING([--enable-termcap], [enable termcap support]))

if test -n "$enable_termcap"; then
	CFLAGS="$CFLAGS -DWI_TERMCAP"
fi


# Check for OpenSSL support
AC_ARG_ENABLE([ssl], AC_HELP_STRING([--enable-ssl], [enable OpenSSL support]))

if test -n "$enable_ssl"; then
	CFLAGS="$CFLAGS -DWI_SSL"
fi


# Check for iconv support
AC_ARG_ENABLE([iconv], AC_HELP_STRING([--enable-iconv], [enable iconv support]))

if test -n "$enable_iconv"; then
	CFLAGS="$CFLAGS -DWI_ICONV"
fi


# Check for maintainer mode
AC_ARG_ENABLE([maintainer_mode], AC_HELP_STRING([--enable-maintainer-mode], [enable maintainer mode]))

if test -n "$enable_maintainer_mode"; then
	AC_SUBST([WI_MAINTAINER], [1])
else
	AC_SUBST([WI_MAINTAINER], [0])
fi


######################################################################
# Checks for additional paths

# Check if we need /usr/local/{include,lib}/
if test -d /usr/local/include; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/include"
fi


# Check if we need /usr/local/ssl/include
if test -n "$enable_ssl"; then
	if test -d /usr/local/ssl/include; then
		CPPFLAGS="$CPPFLAGS -I/usr/local/ssl/include"
	fi
fi


# Check if we need /usr/kerberos/include
if test -d /usr/kerberos/include; then
	CPPFLAGS="$CPPFLAGS -I/usr/kerberos/include"
fi


#######################################################################
# Checks for libraries

# Check for glibc (Linux)
AC_MSG_CHECKING([for glibc])
AC_COMPILE_IFELSE([
	#include <features.h>
	#ifndef __GLIBC__
	chokeme
	#endif
], [
	AC_DEFINE([HAVE_GLIBC], [1], [Define to 1 if you have glibc.])
	AC_DEFINE([_GNU_SOURCE], [1], [Define to 1 if you have glibc.])
	AC_MSG_RESULT([yes])
], [
	AC_MSG_RESULT([no])
])


# Check for CoreServices (Mac OS X)
AC_CHECK_HEADERS([CoreServices/CoreServices.h])


# Check if the sockaddr structs have length members
AC_CHECK_MEMBERS([struct sockaddr.sa_len, struct sockaddr_in.sin_len, struct sockaddr_in6.sin6_len], [], [], [
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>
])


# Check if syslog has facilitynames
AC_CHECK_DECL([facilitynames], [
	AC_DEFINE([HAVE_SYSLOG_FACILITYNAMES], [1], [Define to 1 if you have the declartion of 'facilitynames' and to 0 if you don't.])
], [], [
	#include <stdlib.h>
	#define SYSLOG_NAMES
	#include <syslog.h>
])


# Check if DIR structs have dirfd member
AC_CHECK_MEMBERS([DIR.d_fd, DIR.dd_fd], [], [], [
	#include <sys/types.h>
	#include <dirent.h>
])


#######################################################################
# Checks for header files

AC_CHECK_HEADERS([ \
	machine/param.h \
	sys/sockio.h \
	sys/statfs.h \
	sys/statvfs.h \
	getopt.h \
	ifaddrs.h \
	net/if_dl.h \
	paths.h \
])

if test -n "$enable_termcap"; then
	AC_CHECK_HEADERS([ \
		curses.h \
		term.h \
		termcap.h \
		termios.h \
	])
fi


#######################################################################
# Checks for typedefs, structures, and compiler characteristics

AC_CHECK_DECLS([optreset])
AC_SYS_LARGEFILE
AC_CHECK_TYPES([intmax_t])
AC_CHECK_TYPES([ptrdiff_t])


#######################################################################
# Checks for library functions

AC_FUNC_FSEEKO
AC_CHECK_FUNCS([ \
	daemon \
	dirfd \
	getifaddrs \
	getpagesize \
	pthread_attr_setschedpolicy \
	qsort_r \
	setproctitle \
	srandom \
	statvfs \
	strcasestr \
	strlcat \
	strlcpy \
	strsep \
	vasprintf \
	vfprintf \
])


#######################################################################
# Output

AC_CONFIG_FILES([Makefile])

AC_OUTPUT


#######################################################################
# Print summary

A=$(eval echo ${bindir});	A=$(eval echo ${A})
B=$(eval echo ${mandir});	B=$(eval echo ${B})

echo ""
echo "libwired has been configured with the following options:"

echo ""
echo -n "    pthreads support: "; if test -n "$enable_pthreads"; then echo yes; else echo no; fi
echo -n "     termcap support: "; if test -n "$enable_termcap"; then echo yes; else echo no; fi
echo -n "     OpenSSL support: "; if test -n "$enable_ssl"; then echo yes; else echo no; fi
echo -n "       iconv support: "; if test -n "$enable_iconv"; then echo yes; else echo no; fi

echo ""
echo "                Host: ${host}"
echo "            Compiler: ${CC}"
echo "      Compiler flags: ${CFLAGS}"
echo "  Preprocessor flags: ${CPPFLAGS}"

echo ""
